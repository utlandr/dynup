#!/bin/bash

#================================================================================
#
#
#	FreeDNS update script for useless modems that cannot do the same thing.
#
#	Reed Bell	-	rbell11235@hotmail.co.nz
#
#
#=================================================================================

# Functions
usage() { echo -e "\nUsage:	dynup [-d|-h][-f <int>][-l <str>][-q <str>] \n"
		 echo -e "-d	Detach process and run in background."
		 echo -e "-f	Update frequency (seconds)."
		 echo -e "-h  	Show this help message."
		 echo -e "-l	Log updates to a file."
		 echo -e "-q	FreeDNS update url."
		 echo -e "-v	Increase verbosity.\n\n"
		 echo -e "NOTE:\t(-d) flag is not recommended for most long term setups.\n\tSee README.md to run 'dynup' with systemd."
		 exit 0 
}

update_log(){ 
	echo -e $(date +"%x||%X")"\t$1" >> "$2"
}

call() { wget -qO- https://checkip.amazonaws.com/ 
	}
 
monitor(){
	base=$(call)
	
	while true;
	do
		sleep $freq
		check=$(call)
		if [ $check != $base ]
		then
			return=$(wget --no-check-certificate -qO- $query)
			if [[  $return =~ "ERROR"  ]]
			then
				msg=$(printf "Error attempting change in DNS assignment. Original assignment %s maintained\n" $base)
				update_log "$msg" "$log_file"

			else
				base=$check
				msg=$(printf "DNS updated to %s\n" $check)
				update_log "$msg" "$log_file"
			fi

		else
			msg=$(printf "No external IP change detected. Current assignment maintained.\n")	
			[ $verbose == true ] && update_log "$msg" "$log_file"

		fi
	done
}

filter_args() {
	if [[ $1 -eq 0 ]]; then
		usage
		exit 0
	
	elif [ -z "$query" ]; then
		echo -e "Error:  mandatory -q flag missing"
		usage
		exit 1

	elif [ -z "$log_file" ]; then
		echo -e "Error: no log filename was supplied"
		usage
		exit 1	
	fi
}

# Defaults
daemonize=false
freq=600
log_file="/dev/stdout"
query=
verbose=false

# Parse arguments	
while getopts "q:f:hdvl:" opt; do
	case ${opt} in

		d ) daemonize=true
		 ;;

		f ) freq=$OPTARG
		 ;;
	
		h ) usage
		 ;;

		l ) log_file=$OPTARG
		 ;;

		q ) query=$OPTARG
		 ;;

	 	v ) verbose=true
		 ;;

		\? ) usage
		 ;;
	esac
done

filter_args $#

# Runtime
if $daemonize; then
	update_log "Started Monitoring DNS every ${freq}s in Daemon mode." $log_file
	(monitor;) 0<&- &> /dev/null &
	disown

else
	update_log "Started Monitoring DNS every ${freq}s" $log_file
	monitor

fi
